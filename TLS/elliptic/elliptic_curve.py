from collections import namedtuple


Point = namedtuple('Point', ['x', 'y', 'z'])

def MakePoint(x, y, z = 1):
    return Point(x, y, z)


class EllipticCurve:

    PARAMETERS = {
        "A": {
            'a': 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006083524,
            'b': 12190580024266230156189424758340094075514844064736231252208772337825397464478540423418981074322718899427039088997221609947354520590448683948135300824418144,
            'm': 13407807929942597099574024998205846127479365820592393377723561443721764030073449232318290585817636498049628612556596899500625279906416653993875474742293109,
            'p': 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006083527,
            'q': 13407807929942597099574024998205846127479365820592393377723561443721764030073449232318290585817636498049628612556596899500625279906416653993875474742293109,
            'x': 3,
            'y': 6128567132159368375550676650534153371826708807906353132296049546866464545472607119134529221703336921516405107369028606191097747738367571924466694236795556,
        },
        "B": {
            'a': 6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042156,
            'b': 5472517130514047254760433071281657274171034389553769779747941603125796549693907036696237273952702637857580071293254240945079496484373854264998452887027990,
            'm': 6703903964971298549787012499102923063739682910296196688861780721860882015036922585419853748190383615062910947743405567510148398820717100282856877776119229,
            'p': 6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042159,
            'q': 6703903964971298549787012499102923063739682910296196688861780721860882015036922585419853748190383615062910947743405567510148398820717100282856877776119229,
            'x': 2,
            'y': 1391087797795557258711735874750463328666729297647553860794340434982072762491277963324668489993185089365703033494204180568181905548968011075910357787492797,
        },
    }

    def __init__(self, curve_id):
        assert(curve_id in self.PARAMETERS)
        self.__dict__.update(self.PARAMETERS[curve_id])

    def summ(self, point_a, point_b):
        pass

    def double(self, point):
        pass

    def multiply_by_number(self, point, number):
        result = self.p
        point_power = self.point
        number = number % self.m

        while True:
            if number % 2 == 1:
                result = self.summ(point_power, result)
            if number < 2:
                break
            point_power = self.double(point_power)
            number = number // 2

        return result

    def is_on_curve(self, point):
        right_part = point.x ** 3 + self.a * point.x * point.z ** 2 + self.b * point.z ** 3
        return point.y ** 2 * point.z == right_part
